package br.com.sp.senai.findjob.controller;

import java.util.HashMap;
import java.util.Map;

import javax.servlet.http.HttpServletRequest;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;
import org.springframework.security.crypto.password.PasswordEncoder;
import org.springframework.web.bind.annotation.CrossOrigin;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RestController;

import com.auth0.jwt.JWT;
import com.auth0.jwt.algorithms.Algorithm;

import br.com.sp.senai.findjob.model.Empresa;
import br.com.sp.senai.findjob.model.Erro;
import br.com.sp.senai.findjob.model.Sucesso;
import br.com.sp.senai.findjob.model.TokenJWT;
import br.com.sp.senai.findjob.model.Usuario;
import br.com.sp.senai.findjob.model.Vaga;
import br.com.sp.senai.findjob.repository.EmpresaRepository;
import br.com.sp.senai.findjob.repository.VagaRepository;

@CrossOrigin
@RestController
@RequestMapping("api/empresa")
public class EmpresaRestController {

	@Autowired
	private EmpresaRepository empresaRepository;

	
	public static final String SECRET = "f1ndJ0b@";
	public static final String EMISSOR = "SistemaGerenciadorVaga";

	// metodo encoder para salvar a criptografia
	private PasswordEncoder passwordEncoder = new BCryptPasswordEncoder();


	// refeito metodo POST da Empresa (GR) *Alteração na model

	@RequestMapping(value = "", method = RequestMethod.POST) public
	  ResponseEntity<Empresa> cadastroEmpresaPOST(@RequestBody Empresa empresa) {
	
		if (empresaRepository.findByEmail(empresa.getEmail()) != null) {
			return new ResponseEntity<Empresa>(HttpStatus.UNPROCESSABLE_ENTITY);
		} else if (empresaRepository.findByCnpj(empresa.getCnpj()) != null) {
			return new ResponseEntity<Empresa>(HttpStatus.CONFLICT);
			}

		if (empresaRepository.findByEmail(empresa.getEmail()) == null
				|| empresaRepository.findByCnpj(empresa.getCnpj()) == null) {
			try {
				empresaRepository.save(empresa);
				return new ResponseEntity<Empresa>(HttpStatus.CREATED);
			} catch (Exception e) {
				return new ResponseEntity<Empresa>(HttpStatus.BAD_REQUEST);
			}
		}
		return new ResponseEntity<Empresa>(HttpStatus.BAD_REQUEST);
	}

	/*
	 * @RequestMapping(value = "", method = RequestMethod.POST) public
	 * ResponseEntity<Object> cadastrarEmpresaPost(@RequestBody Empresa empresa) {
	 * 
	 * if (empresaRepository.findByCnpj(empresa.getCnpj()) != null) { return new
	 * ResponseEntity<Object>(HttpStatus.UNPROCESSABLE_ENTITY);
	 * 
	 * }
	 * 
	 * if (empresaRepository.findByCnpj(empresa.getCnpj()) == null try {
	 * empresaRepository.save(empresa); return new
	 * ResponseEntity<Object>(HttpStatus.CREATED); } catch (Exception e) { return
	 * new ResponseEntity<Object>(HttpStatus.BAD_REQUEST); } } return new
	 * ResponseEntity<Object>(HttpStatus.BAD_REQUEST); }
	 */

// metodo esta funcionando
// metodo para atualizar os dados do usuario
	@RequestMapping(value = "/{id}", method = RequestMethod.PUT, consumes = MediaType.APPLICATION_JSON_VALUE)
	public ResponseEntity<Object> atualizarEmpresa(@PathVariable("id") Long id, @RequestBody Empresa empresa,
			HttpServletRequest request) {

		if (empresa.getId() != id) {
			Erro erro = new Erro(HttpStatus.INTERNAL_SERVER_ERROR, "ID inválido", null);
			return new ResponseEntity<Object>(erro, HttpStatus.INTERNAL_SERVER_ERROR);
		} else {
			// busca o usuario no banco de dados
			empresaRepository.findById(id);

			// criptografa a senha
			// String cripto = this.passwordEncoder.encode(empresa.getSenha());

			// pega a senha criptografada
			// empresa.setSenha(cripto);

			empresaRepository.save(empresa);
			return new ResponseEntity<Object>(HttpStatus.OK);
		}
	}

	// metodo para listar todos as empresas inseridos no banco
	@RequestMapping(value = "", method = RequestMethod.GET)
	public Iterable<Empresa> listaEmpresa(Empresa empresa) {
		return empresaRepository.findAll();

	}

	// refazendo metodo que tras a empresa pelo ID (GR)*add uma Query no Repository
	@RequestMapping(value = "/empresaID/{id}", method = RequestMethod.GET)
	public Iterable<Empresa> listaPorID(@PathVariable("id") Long id) {
		return empresaRepository.buscaPorIdEmpresa(id);
	}
	/*
	 * //metodo para pegar empresa especifica pelo id
	 * 
	 * @RequestMapping(value = "/empresa/{id}", method = RequestMethod.GET) public
	 * ResponseEntity<Object> buscaUsuarioEspecifico(@PathVariable Long id) { try {
	 * Optional<Empresa> e = empresaRepository.findById(id); if (e.isEmpty()) {
	 * return
	 * ResponseEntity.status(HttpStatus.BAD_REQUEST).body("empresa não localizada");
	 * } return ResponseEntity.status(200).body(e); } catch (Exception e) {
	 * e.printStackTrace(); return ResponseEntity.status(500).body(e); } }
	 */

	/*
	 * //metodo para cadastrar empresa
	 * 
	 * @RequestMapping(value = "", method = RequestMethod.PUT, consumes =
	 * MediaType.APPLICATION_JSON_VALUE) public ResponseEntity<Empresa>
	 * cadastraEmpresa(@Valid @RequestBody Empresa empresa) { try {
	 * empresaRepository.save(empresa); return
	 * ResponseEntity.status(201).body(empresa); } catch
	 * (DataIntegrityViolationException e) { e.printStackTrace(); return new
	 * ResponseEntity<Empresa>(HttpStatus.INTERNAL_SERVER_ERROR); } catch (Exception
	 * e) { e.printStackTrace(); return new
	 * ResponseEntity<Empresa>(HttpStatus.INTERNAL_SERVER_ERROR); } }
	 */

	// metodo para validar a senha quando fazer o login
	public Boolean validarSenhaEmpresa(Empresa empresa) {
		// pegando a senha no banco
		String senha = empresaRepository.findById(empresa.getId()).get().getSenha();
		// validacao da senha, comparando com o banco de dados
		Boolean valido = passwordEncoder.matches(empresa.getSenha(), senha);
		return valido;
	}

	// metodo para realizar login
	@RequestMapping(value = "/login", method = RequestMethod.POST, consumes = MediaType.APPLICATION_JSON_VALUE)
	public ResponseEntity<TokenJWT> login(@RequestBody Empresa empresa) {
		// buscar o usuario no banco de dados
		empresa = empresaRepository.findByCnpjAndSenha(empresa.getCnpj(), empresa.getSenha());
		// verifica se o usuário não é nulo

		if (empresa != null) {

			// cria uma variavel payload e insere os dados da empresa
			Map<String, Object> payload = new HashMap<String, Object>();
			payload.put("id",empresa.getId());
			payload.put("name",empresa.getNome());
			payload.put("CNPJ",empresa.getCnpj());
			payload.put("email",empresa.getEmail());
			payload.put("senha",empresa.getSenha());
			payload.put("endereco",empresa.getEndereco());
			payload.put("numero",empresa.getNumero());
			payload.put("complemento",empresa.getComplemento());
			payload.put("bairro",empresa.getBairro());
			payload.put("cidade",empresa.getCidade());
			payload.put("uf", empresa.getUf());
			payload.put("ativo",empresa.getAtivo());
			payload.put("tipoUser",empresa.getTipoUsuario().toString());
			payload.put("aprovado", empresa.getAprova());
			// algoritmo para assinar o token
			Algorithm algoritmo = Algorithm.HMAC256(SECRET);
			// cria o token
			TokenJWT tokenJwt = new TokenJWT();
			// gera o token
			tokenJwt.setToken(JWT.create().withPayload(payload).withIssuer(EMISSOR).sign(algoritmo));

			System.out.println("passou pelo login");
			return ResponseEntity.ok(tokenJwt);

		} else {
			System.out.println("passou direto");
			return new ResponseEntity<TokenJWT>(HttpStatus.UNAUTHORIZED);
		}
	}

	// metodo para tornar o estado Ativo da empresa como false
	@RequestMapping(value = "/ativar/{id}", method = RequestMethod.PUT)
	public ResponseEntity<Object> AtivarSolicitacao(@PathVariable("id") Long id, Empresa empresa,
			HttpServletRequest request) {
		empresa = empresaRepository.findById(id).get();
		empresa.setAtivo(true);
		empresaRepository.save(empresa);
		Sucesso sucesso = new Sucesso(HttpStatus.OK, "Sucesso");
		return new ResponseEntity<Object>(sucesso, HttpStatus.OK);

	}

	// metodo para tornar o estado Ativo da empresa como false
	@RequestMapping(value = "/desativar/{id}", method = RequestMethod.PUT)
	public ResponseEntity<Object> desativarSolicitacao(@PathVariable("id") Long id, Empresa empresa,
			HttpServletRequest request) {
		empresa = empresaRepository.findById(id).get();
		empresa.setAtivo(false);
		empresaRepository.save(empresa);
		Sucesso sucesso = new Sucesso(HttpStatus.OK, "Sucesso");
		return new ResponseEntity<Object>(sucesso, HttpStatus.OK);

	}

	// metodo para tornar o estado Ativo da empresa como false
	@RequestMapping(value = "/aprovar/{id}", method = RequestMethod.PUT)
	public ResponseEntity<Object> AprovarSolicitacao(@PathVariable("id") Long id, Empresa empresa,
			HttpServletRequest request) {
		empresa = empresaRepository.findById(id).get();
		empresa.setAprova(true);
		empresaRepository.save(empresa);
		Sucesso sucesso = new Sucesso(HttpStatus.OK, "Sucesso");
		return new ResponseEntity<Object>(sucesso, HttpStatus.OK);

	}

	@RequestMapping(value = "/excluir/{id}", method = RequestMethod.DELETE)
	boolean CancelarSolicitacao(@PathVariable Long id) {
		empresaRepository.deleteById(id);
		return true;

	}
	
	// metodo para editar empresa
		@RequestMapping(value = "/editaempresa/{id}", method = RequestMethod.PUT)
		public ResponseEntity<Empresa> editaEmpresa(@RequestBody Empresa empresa) {
			if (empresa != null) {
				empresaRepository.save(empresa);
				System.out.println("passou aqui");

				return ResponseEntity.status(201).body(empresa);
			} else {
				Erro erro = new Erro(HttpStatus.INTERNAL_SERVER_ERROR, "ID inválido", null);
				System.out.println("passou direto");
				return new ResponseEntity<Empresa>(HttpStatus.INTERNAL_SERVER_ERROR);
			}
		}

}
