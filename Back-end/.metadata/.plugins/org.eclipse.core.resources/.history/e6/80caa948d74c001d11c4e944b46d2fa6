package br.com.sp.senai.findJob.rest;

import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.dao.DataIntegrityViolationException;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;
import org.springframework.security.crypto.password.PasswordEncoder;
import org.springframework.web.bind.annotation.CrossOrigin;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RestController;

import br.com.sp.senai.findJob.model.Usuario;
import br.com.sp.senai.findJob.repository.UsuarioRepository;

@CrossOrigin
	@RestController
	@RequestMapping("api/usuario")
	public class UsuarioRestController {
		
		
		public static final String EMISSOR = "Senai";
		public static final String SECRET = "F1Lh@sD3J32u2";
		
		@Autowired
		private UsuarioRepository repository;
		private PasswordEncoder passwordEncoder;

		public UsuarioService(UsuarioRepository repository) {
			this.repository = repository;
			this.passwordEncoder = new BCryptPasswordEncoder();

		}
		
		public List<Usuario> listarUsuario(){
			List<Usuario> lista = repository.findAll();
			return lista;
		}
		
		public Usuario criarUsuario(Usuario usuario) {
			String encoder = this.passwordEncoder.encode(usuario.getSenha());
			usuario.setSenha(encoder);
			Usuario novoUsuario = repository.save(usuario);
			return novoUsuario;
		}
		
		public Usuario editarUsuario(Usuario usuario) {
			String encoder = this.passwordEncoder.encode(usuario.getSenha());
			usuario.setSenha(encoder);
			Usuario novoUsuario = repository.save(usuario);
			return novoUsuario;
		}
		
		public Boolean excluirUsuario(Integer id) {
			repository.deleteById(id);
			return true;
		}
		
		public Boolean validarSenha(Usuario usuario) {
			String senha = repository.getById(usuario.getId()).getSenha();
			Boolean valida = passwordEncoder.matches(usuario.getSenha(),senha);
			return valida;
			
		} 
		

		
		@RequestMapping(value = "", method = RequestMethod.PUT, consumes = MediaType.APPLICATION_JSON_VALUE)
		public ResponseEntity<Usuario> criarUsuario(@RequestBody Usuario usuario) {
			try {
				repository.save(usuario);
				return ResponseEntity.ok(usuario);
			} catch (DataIntegrityViolationException e) {
				e.printStackTrace();
				return new ResponseEntity<Usuario>(HttpStatus.INTERNAL_SERVER_ERROR);
			} catch (Exception e) {
				e.printStackTrace();
				return new ResponseEntity<Usuario>(HttpStatus.INTERNAL_SERVER_ERROR);
			}
		}
		
}
