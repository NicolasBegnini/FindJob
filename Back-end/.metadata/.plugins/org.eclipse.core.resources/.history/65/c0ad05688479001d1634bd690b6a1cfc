package br.com.sp.senai.findjob.controller;

import java.util.HashMap;
import java.util.Map;
import java.util.Optional;

import javax.servlet.http.HttpServletRequest;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;
import org.springframework.security.crypto.password.PasswordEncoder;
import org.springframework.web.bind.annotation.CrossOrigin;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RestController;

import com.auth0.jwt.JWT;
import com.auth0.jwt.algorithms.Algorithm;

import br.com.sp.senai.findjob.model.Erro;
import br.com.sp.senai.findjob.model.TokenJWT;
import br.com.sp.senai.findjob.model.Usuario;
import br.com.sp.senai.findjob.model.Vaga;
import br.com.sp.senai.findjob.repository.UsuarioRepository;

@CrossOrigin
@RestController
@RequestMapping("/api/usuario")
public class UsuarioRestController {

	@Autowired
	private UsuarioRepository usuarioRepository;

	public static final String EMISSOR = "Senai";
	public static final String SECRET = "F1Lh@sD3J32u2";

	// metodo encoder para salvar a criptografia
	private PasswordEncoder passwordEncoder = new BCryptPasswordEncoder();

	// criar metodo para alterar a senha
	// metodo está funcionando
	// metodo para criar usuario
	@RequestMapping(value = "", method = RequestMethod.POST, consumes = MediaType.APPLICATION_JSON_VALUE)
	public ResponseEntity<Usuario> cadastrar(@RequestBody Usuario usuario) {

		if (usuarioRepository.findByEmail(usuario.getEmail()) != null) {
			return new ResponseEntity<Usuario>(HttpStatus.UNPROCESSABLE_ENTITY);
		} else if (usuarioRepository.findByCpf(usuario.getCpf()) != null) {
			return new ResponseEntity<Usuario>(HttpStatus.CONFLICT);
			}

		if (usuarioRepository.findByCpf(usuario.getCpf()) == null
				|| usuarioRepository.findByEmail(usuario.getEmail()) == null) {
			try {
				usuarioRepository.save(usuario);
				return new ResponseEntity<Usuario>(HttpStatus.CREATED);
			} catch (Exception e) {
				return new ResponseEntity<Usuario>(HttpStatus.BAD_REQUEST);
			}
		}
		return new ResponseEntity<Usuario>(HttpStatus.BAD_REQUEST);
	}

	// metodo funcionando
	// metodo para pegar usuario especifico pelo id
	@RequestMapping(value = "/especifico/{id}", method = RequestMethod.GET)
	public ResponseEntity<Object> buscaUsuarioEspecifico(@PathVariable Long id) {
		try {
			Optional<Usuario> u = usuarioRepository.findById(id);
			if (u.isEmpty()) {
				return ResponseEntity.status(HttpStatus.BAD_REQUEST).body("usuario nao localizado");
			}
			return ResponseEntity.status(200).body(u);
		} catch (Exception e) {
			e.printStackTrace();
			return ResponseEntity.status(500).body(e);
		}
	}

	// metodo funcionando
	// metodo para listar todos os usuarios inseridos no banco
	@RequestMapping(value = "", method = RequestMethod.GET)
	public Iterable<Usuario> listaUsuario(Usuario usuario) {
		return usuarioRepository.findAll();

	}

	// metodo esta funcionando
	// metodo para atualizar os dados do usuario
	
	  @RequestMapping(value = "/{id}", method = RequestMethod.PUT, consumes =
	  MediaType.APPLICATION_JSON_VALUE) public ResponseEntity<Object>
	  atualizarUsuario(@PathVariable("id") Long id, @RequestBody Usuario usuario,
	  HttpServletRequest request) {
	  
	  //if (usuario.getId() != id) { Erro erro = new
	  //Erro(HttpStatus.INTERNAL_SERVER_ERROR, "ID inválido", null); return new
	  //ResponseEntity<Object>(erro, HttpStatus.INTERNAL_SERVER_ERROR); } else { //
	  //busca o usuario no banco de dados 
	  usuarioRepository.findById(id);
	  
	  // criptografa a senha String cripto =
	 // this.passwordEncoder.encode(usuario.getSenha());
	  
	  // pega a senha criptografada usuario.setSenha(cripto);
	  
	  usuarioRepository.save(usuario); 
 	  return new ResponseEntity<Object>(HttpStatus.OK);
 	  }
	  
	 
	
	
	
	// metodo para validar a senha quando fazer o login
	public Boolean validarSenha(Usuario usuario) {
		// pegando a senha no banco
		String senha = usuarioRepository.findById(usuario.getId()).get().getSenha();
		// validacao da senha, comparando com o banco de dados
		Boolean valido = passwordEncoder.matches(usuario.getSenha(), senha);
		return valido;
	}

	@RequestMapping(value = "/login", method = RequestMethod.POST, consumes = MediaType.APPLICATION_JSON_VALUE)
	public ResponseEntity<TokenJWT> login(@RequestBody Usuario usuario) {
		// buscar o usuario no banco de dados
		usuario = usuarioRepository.findByCpfAndSenha(usuario.getCpf(), usuario.getSenha());
		// verifica se o usuário não é nulo

		if (usuario != null) {
			// variável para inserir dados no payload
			Map<String, Object> payload = new HashMap<String, Object>();
			payload.put("id", usuario.getId());
			payload.put("name", usuario.getNome());
			payload.put("email", usuario.getEmail());
			payload.put("cpf", usuario.getCpf());
			payload.put("dadosPessoais", usuario.getDadosPessoais());
			payload.put("senha", usuario.getSenha());
			payload.put("TipoUser", usuario.getTipoUsuario().toString());

			// algoritmo para assinar o token
			Algorithm algoritmo = Algorithm.HMAC256(SECRET);
			// cria o token
			TokenJWT tokenJwt = new TokenJWT();
			// gera o token
			tokenJwt.setToken(JWT.create().withPayload(payload).withIssuer(EMISSOR).sign(algoritmo));

			System.out.println("passou pelo login");
			return ResponseEntity.ok(tokenJwt);

		} else {
			System.out.println("passou direto");
			return new ResponseEntity<TokenJWT>(HttpStatus.UNAUTHORIZED);
		}
	}

	// metodo para excluir usuario pelo id
	@RequestMapping(value = "/excluir/{id}", method = RequestMethod.DELETE)
	public boolean excluirUsuario(@PathVariable Long id) {
		usuarioRepository.deleteById(id);
		return true;
	}

}
